/// <reference types="node" />
import { Transform, TransformCallback } from 'stream';
import zstd, { ZstdCompressParams, ZstdDecompressParams } from './zstd';
export declare function compress(input: Buffer, params?: ZstdCompressParams): Promise<Buffer>;
export declare function decompress(input: Buffer, params?: ZstdDecompressParams): Promise<Buffer>;
export declare function compressSync(input: Buffer, params?: ZstdCompressParams): Buffer;
export declare function decompressSync(input: Buffer, params?: ZstdDecompressParams): Buffer;
interface TransformStatus {
    blockSize: number;
    remaining: number;
}
export declare class TransformStreamCompressor extends Transform {
    compressor: typeof zstd.StreamCompressor;
    sync: boolean;
    status: TransformStatus;
    constructor(params?: ZstdCompressParams, sync?: boolean);
    _transform(chunk: Buffer, encoding: BufferEncoding, next: TransformCallback): void;
    _flush(done: TransformCallback): void;
}
export declare function compressStreamChunk(stream: Transform, chunk: Buffer, compressor: typeof zstd.StreamCompressor, status: TransformStatus, sync: boolean, done: (err?: Error) => void): void;
export declare function compressStream(params?: ZstdCompressParams): TransformStreamCompressor;
export declare class TransformStreamDecompressor extends Transform {
    decompressor: typeof zstd.StreamDecompressor;
    sync: boolean;
    status: TransformStatus;
    constructor(params?: ZstdDecompressParams, sync?: boolean);
    _transform(chunk: Buffer, encoding: BufferEncoding, next: TransformCallback): void;
    _flush(done: TransformCallback): void;
}
export declare function decompressStreamChunk(stream: Transform, chunk: Buffer, decompressor: typeof zstd.StreamDecompressor, status: TransformStatus, sync: boolean, done: (err?: Error) => void): void;
export declare function decompressStream(params?: ZstdDecompressParams): TransformStreamDecompressor;
export {};
