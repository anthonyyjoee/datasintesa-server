"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fileType = __importStar(require("file-type"));
const decompress_tar_1 = __importDefault(require("@xingrz/decompress-tar"));
const is_stream_1 = __importDefault(require("is-stream"));
const unbzip2_stream_1 = __importDefault(require("unbzip2-stream"));
exports.default = () => async (input, opts) => {
    const isBuffer = Buffer.isBuffer(input);
    const type = isBuffer ? await fileType.fromBuffer(input) : null;
    if (!isBuffer && !(0, is_stream_1.default)(input)) {
        throw new TypeError(`Expected a Buffer or Stream, got ${typeof input}`);
    }
    if (isBuffer && (!type || type.ext !== 'bz2')) {
        return [];
    }
    const decompressor = (0, unbzip2_stream_1.default)();
    const result = (0, decompress_tar_1.default)()(decompressor, opts);
    if (isBuffer) {
        decompressor.end(input);
    }
    else {
        input.once('error', e => decompressor.emit('error', e));
        input.pipe(decompressor);
    }
    return result;
};
