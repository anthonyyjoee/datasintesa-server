"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fileType = __importStar(require("file-type"));
const tar_stream_1 = __importDefault(require("tar-stream"));
const is_stream_1 = __importDefault(require("is-stream"));
const pond_1 = __importDefault(require("pond"));
const events_1 = require("events");
exports.default = () => async (input, opts) => {
    const isBuffer = Buffer.isBuffer(input);
    const type = isBuffer ? await fileType.fromBuffer(input) : null;
    if (!isBuffer && !(0, is_stream_1.default)(input)) {
        throw new TypeError(`Expected a Buffer or Stream, got ${typeof input}`);
    }
    if (isBuffer && (!type || type.ext !== 'tar')) {
        return [];
    }
    const extract = tar_stream_1.default.extract();
    const files = [];
    extract.on('entry', async (header, stream, next) => {
        if (!header.mode || !header.mtime || !header.type) {
            return next();
        }
        if (header.type != 'file' && header.type != 'directory' && header.type != 'symlink' && header.type != 'link') {
            return next();
        }
        const file = {
            mode: header.mode,
            mtime: header.mtime,
            path: header.name,
            type: header.type,
        };
        if (file.type === 'symlink' || file.type === 'link') {
            file.linkname = header.linkname;
        }
        try {
            if (opts === null || opts === void 0 ? void 0 : opts.fileWriter) {
                await opts.fileWriter(file, file.type == 'file' ? stream : undefined);
            }
            else if (file.type == 'file') {
                file.data = await (0, pond_1.default)(stream).spoon();
            }
        }
        catch (e) {
            return next(e);
        }
        files.push(file);
        next();
    });
    if (Buffer.isBuffer(input)) {
        extract.end(input);
    }
    else {
        input.once('error', e => extract.emit('error', e));
        input.pipe(extract);
    }
    await (0, events_1.once)(extract, 'finish');
    return files;
};
