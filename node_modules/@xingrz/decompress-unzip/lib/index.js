"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fileType = __importStar(require("file-type"));
const yauzl_1 = __importDefault(require("yauzl"));
const is_stream_1 = __importDefault(require("is-stream"));
const pond_1 = __importDefault(require("pond"));
const util_1 = require("util");
const events_1 = require("events");
const loadZip = (0, util_1.promisify)(yauzl_1.default.fromBuffer);
function getType(entry, mode) {
    const IFMT = 61440;
    const IFDIR = 16384;
    const IFLNK = 40960;
    const madeBy = entry.versionMadeBy >> 8;
    if ((mode & IFMT) === IFLNK) {
        return 'symlink';
    }
    if ((mode & IFMT) === IFDIR || (madeBy === 0 && entry.externalFileAttributes === 16)) {
        return 'directory';
    }
    return 'file';
}
async function extractEntry(entry, zip, opts) {
    const mode = (entry.externalFileAttributes >> 16) & 0xFFFF;
    const file = {
        mode: mode,
        mtime: entry.getLastModDate(),
        path: entry.fileName,
        type: getType(entry, mode),
    };
    if (file.mode === 0 && file.type === 'directory') {
        file.mode = 0o755;
    }
    if (file.mode === 0) {
        file.mode = 0o644;
    }
    const openReadStream = (0, util_1.promisify)(zip.openReadStream.bind(zip));
    try {
        const stream = await openReadStream(entry);
        if (!stream) {
            return file;
        }
        if (file.type == 'symlink') {
            file.linkname = (await (0, pond_1.default)(stream).spoon()).toString();
        }
        if (opts === null || opts === void 0 ? void 0 : opts.fileWriter) {
            await opts.fileWriter(file, file.type == 'file' ? stream : undefined);
        }
        else if (file.type == 'file') {
            file.data = await (0, pond_1.default)(stream).spoon();
        }
        return file;
    }
    catch (e) {
        zip.close();
        throw e;
    }
}
async function extractFile(zip, opts) {
    const files = [];
    zip.on('entry', async (entry) => {
        try {
            const file = await extractEntry(entry, zip, opts);
            files.push(file);
            zip.readEntry();
        }
        catch (e) {
            zip.emit('error', e);
        }
    });
    zip.readEntry();
    await (0, events_1.once)(zip, 'end');
    return files;
}
exports.default = () => async (input, opts) => {
    if (!Buffer.isBuffer(input) && !(0, is_stream_1.default)(input)) {
        throw new TypeError(`Expected a Buffer or Stream, got ${typeof input}`);
    }
    if ((0, is_stream_1.default)(input)) {
        input = await (0, pond_1.default)(input).spoon();
    }
    const type = await fileType.fromBuffer(input);
    if (!type || type.ext !== 'zip') {
        return [];
    }
    const zip = await loadZip(input, { lazyEntries: true });
    if (!zip) {
        return [];
    }
    return extractFile(zip, opts || {});
};
